name: CI/CD Pipeline

on: 
  push: 

permissions:
  contents: read
  pages: write
  id-token: write

env:
  FRONTEND_PATH: frontend

jobs: 
  audit:
    name: Audit Frontend Deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Change directory to frontend
        run: cd ${{ env.FRONTEND_PATH }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Run the audit on production deps only
        run: npm audit --omit=dev 
      
      - name: Check for vulnerabilities
        run: npm audit --omit=dev --json > audit-report.json
      - name: Fail if vulnerabilities found
        run: |
          vulnerabilities=$(jq '.metadata.vulnerabilities | select(.total > 0)' audit-report.json)
          if [ "$vulnerabilities" ]; then
            echo "Vulnerabilities found"
            exit 1
          fi

  lint:
    name: Ensure Code Style
    runs-on: ubuntu-latest
    needs: audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Change directory to frontend
        run: cd ${{ env.FRONTEND_PATH }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Install deps
        run: npm install

      - name: Lint code
        run: npm run lint

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Change directory to frontend
        run: cd ${{ env.FRONTEND_PATH }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Install deps
        run: npm install

      - name: Run the unit tests
        run: npm run test-ci

  static-analysis:
    name: Run Static Code Analysis
    runs-on: ubuntu-latest
    needs: audit
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Change directory to frontend
        run: cd ${{ env.FRONTEND_PATH }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          config-file: .github/codeql/codeql.config.yml

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Install Deps
        run: npm install

      - name: Build
        run: npm run build

  build:
    name: Build Frontend Artifact
    runs-on: ubuntu-latest
    needs: 
      - lint
      - test
      - static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Change directory to frontend
        run: cd ${{ env.FRONTEND_PATH }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm install

      - name: Build artifact
        run: npm run build
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_PATH }}/build

  deploy:
    name: Deploy Frontend Artifact
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.ref == 'refs/heads/olt'
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_PATH }}/build

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          folder: ${{ env.FRONTEND_PATH }}/build

  verify:
    name: Verify Successful Deployment
    runs-on: ubuntu-latest
    needs:
      - deploy
    if: success()
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Frontend Smoke Test
        run: |
          export TEST_URL=${{ needs.deploy.outputs.page_url }}
          cd ${{ env.FRONTEND_PATH }}/e2e
          npm install
          npm run smoke
